.container {
  // border: 1px solid red;
  max-width: 1200px;
  width: 100%;
  margin: 0 auto;
  padding-right: 16px;
  padding-left: 16px;
}

@mixin row() {
  margin: {
    left: -16px;
    right: -16px;
  }
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}
.row {
  @include row();
}

//user
$grids: (
  gutter: 16px,
);

@mixin colPx($num: 1) {
  $grids: () !default;
  $defaults: (
    columns: 12,
    gutter: 16px,
  );
  $grids: map-merge($defaults, $grids);
  // merge完結果
  // $grids:(
  // columns:12,
  // gutter: 16px,
  // )
  $column: map-get($grids, columns); //12
  $col: (100% / $column); //100% / 12
  $gutter: map-get($grids, gutter); //16px
  width: calc(#{$col * $num});
  float: left;
  padding-left: $gutter;
  padding-right: $gutter;
}

//user
$breakpoints: (
  sm: auto 768px,
  md: 768px 992px,
  lg: 992px auto,
);

@mixin media($name) {
  $breakpoints: () !default;
  $defaults: (
    xs: auto 576px,
    sm: 576px 768px,
    md: 768px 992px,
    lg: 992px 1200px,
    xl: 1200px auto,
  );

  $point: map-get($breakpoints, $name) or map-get($defaults, $name);

  @if $point {
    $min: nth($point, 1);
    $max: nth($point, 2);
    @if $min==auto {
      @media (max-width: $max) {
        @content;
      }
    } @else if $max==auto {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    }
  }
}

@each $key, $value in $breakpoints {
  @include media($key) {
    @for $index from 1 through 12 {
      .col-#{$key}-#{$index} {
        @include colPx($index);
      }
    }
  }
}
